[{"/home/ben/GitHub/quiz-app/src/index.js":"1","/home/ben/GitHub/quiz-app/src/App.js":"2","/home/ben/GitHub/quiz-app/src/reportWebVitals.js":"3","/home/ben/GitHub/quiz-app/src/components/loader.js":"4","/home/ben/GitHub/quiz-app/src/components/quiz.js":"5"},{"size":500,"mtime":1610200903987,"results":"6","hashOfConfig":"7"},{"size":4795,"mtime":1610202875631,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1610200903987,"results":"9","hashOfConfig":"7"},{"size":109,"mtime":1610202754566,"results":"10","hashOfConfig":"7"},{"size":1693,"mtime":1610203178962,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"hsh81o",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/ben/GitHub/quiz-app/src/index.js",[],["25","26"],"/home/ben/GitHub/quiz-app/src/App.js",["27"],"import logo from './logo.svg';\nimport './App.css';\nimport Quiz from \"./components/quiz.js\";\nimport Loader from \"./components/loader.js\"\nimport React, { Component } from \"react\";\n\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// Main App class\nclass App extends Component {\n  constructor(props) {\n      super(props);\n\n      this.state = {\n          isLoading: false,\n          isRunning: false,\n          url: null,\n      };\n      this.startQuiz = this.startQuiz.bind(this);\n  }\n  \n  // Starts the quiz after choices selecteded\n  startQuiz(values) {\n      const { category, difficulty, type } = values;\n      const url =\n          \"https://opentdb.com/api.php?amount=10&category=\" +\n          category +\n          \"&difficulty=\" +\n          difficulty +\n          \"&type=\" +\n          type;\n\n      this.setState({ isRunning: true, url });\n      console.log(values, url);\n  }\n\n  render() {\n      const { isLoading, isRunning, url } = this.state;\n      return (\n          <div>\n              {!isLoading && !isRunning && (\n                  <Start startQuiz={this.startQuiz} />\n              )}\n\n              {!isLoading && isRunning && <Quiz url={url} />}\n          </div>\n      );\n  }\n}\n\n// Start page with selector\nclass Start extends Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n          isLoading: true,\n          categories: [],\n          difficulties: [\"Easy\", \"Medium\", \"Hard\"],\n          types: [\n              { value: \"multiple\", text: \"Multiple Choice\" },\n              { value: \"boolean\", text: \"True/False\" },\n          ],\n          formVal: null,\n          category: \"\",\n          difficulty: \"\",\n          type: \"\",\n      };\n      this.handleChange = this.handleChange.bind(this);\n  }\n\n  // Fetches list of categories\n  componentDidMount() {\n      fetch(\"https://opentdb.com/api_category.php\")\n          .then((response) => response.json())\n          .then((data) =>\n              this.setState({\n                  categories: data.trivia_categories,\n                  isLoading: false,\n              })\n          );\n  }\n\n  // setData(result) {\n  //     this.setState\n  // }\n\n  // sets state to selection\n  handleChange(event) {\n      const type = event.target.id;\n      const value = event.target.value;\n      console.log(type, value);\n      this.setState({ [type]: value });\n  }\n  handleSubmit(event) {\n      alert(this.state.category);\n  }\n\n  render() {\n      const { category, difficulty, type } = this.state;\n      const vals = { category, difficulty, type };\n      return (\n          <div>\n              {this.state.isLoading && <Loader />}\n              {!this.state.isLoading && (\n                  <form onSubmit={this.handleSubmit}>\n                      <select id=\"category\" onChange={this.handleChange}>\n                          <option value=\"\" selected=\"selected\">\n                              Any Category\n                          </option>\n\n                          {this.state.categories.map((item) => (\n                              <option value={item.id}>{item.name}</option>\n                          ))}\n                      </select>\n\n                      <select id=\"difficulty\" onChange={this.handleChange}>\n                          <option value=\"\" selected=\"selected\">\n                              Any Difficulty\n                          </option>\n                          {this.state.difficulties.map((item) => (\n                              <option value={item.toLowerCase()}>\n                                  {item}\n                              </option>\n                          ))}\n                      </select>\n\n                      <select id=\"type\" onChange={this.handleChange}>\n                          <option value=\"\" selected=\"selected\">\n                              Any Type\n                          </option>\n                          {this.state.types.map((item) => (\n                              <option value={item.value}>{item.text}</option>\n                          ))}\n                      </select>\n                      <input\n                          type=\"submit\"\n                          value=\"Submit\"\n                          onClick={() => this.props.startQuiz(vals)}\n                      />\n                  </form>\n              )}\n          </div>\n      );\n  }\n}\n\n\n\n\n\n\n\n\nexport default App;\n","/home/ben/GitHub/quiz-app/src/reportWebVitals.js",[],"/home/ben/GitHub/quiz-app/src/components/loader.js",["28"],"import React, { Component } from \"react\";\n\nconst Loader = () => <div>Loading!</div>;\n\nexport default Loader;\n","/home/ben/GitHub/quiz-app/src/components/quiz.js",["29","30","31"],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":1,"column":8,"nodeType":"38","messageId":"39","endLine":1,"endColumn":12},{"ruleId":"36","severity":1,"message":"40","line":1,"column":17,"nodeType":"38","messageId":"39","endLine":1,"endColumn":26},{"ruleId":"36","severity":1,"message":"41","line":33,"column":13,"nodeType":"38","messageId":"39","endLine":33,"endColumn":27},{"ruleId":"36","severity":1,"message":"42","line":34,"column":13,"nodeType":"38","messageId":"39","endLine":34,"endColumn":27},{"ruleId":"36","severity":1,"message":"43","line":35,"column":13,"nodeType":"38","messageId":"39","endLine":35,"endColumn":23},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","'correctAnswers' is assigned a value but never used.","'answerSelected' is assigned a value but never used.","'isComplete' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]