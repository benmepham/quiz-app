{"version":3,"sources":["components/loader.js","components/quiz.js","components/start.js","components/error.js","components/header.js","App.js","reportWebVitals.js","index.js"],"names":["Loader","Quiz","props","state","isLoading","quizData","questionIndex","correctAnswers","isComplete","correct","selected","showAnswer","setOptions","bind","handleClick","handleNext","handleCheck","restartSame","this","questions","options","incorrect_answers","Math","floor","random","length","splice","correct_answer","setState","event","target","value","className","onClick","restartQuiz","he","decode","question","map","item","Component","Start","difficulties","types","text","category","difficulty","type","handleChange","id","vals","categories","onChange","name","toLowerCase","startQuiz","Error","message","Header","App","isRunning","error","handleRestart","fetch","then","response","json","data","trivia_categories","catch","values","response_code","results","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62582f16.chunk.js","sourcesContent":["const Loader = () => {\n\n    return <div>Loading...</div>;\n};\n\nexport default Loader;\n","import React, { Component } from \"react\";\nimport Loader from \"./loader.js\";\nimport he from \"he\";\n\nclass Quiz extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: true,\n            quizData: null,\n            questionIndex: 0,\n            correctAnswers: 0,\n            isComplete: false,\n            correct: null,\n            selected: null,\n            showAnswer: false,\n        };\n        this.setOptions = this.setOptions.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        this.handleNext = this.handleNext.bind(this);\n        this.handleCheck = this.handleCheck.bind(this);\n        this.restartSame = this.restartSame.bind(this);\n    }\n\n    componentDidMount() {\n        this.setOptions(this.props.questions, this.state.questionIndex);\n    }\n\n    setOptions(quizData, questionIndex) {\n        const options = [...quizData[questionIndex].incorrect_answers];\n        const correct = Math.floor(Math.random() * (options.length + 1) + 1);\n        options.splice(correct, 1, quizData[questionIndex].correct_answer);\n        this.setState({\n            options,\n            quizData,\n            correct: quizData[questionIndex].correct_answer,\n            isLoading: false,\n        });\n    }\n\n    handleClick(event) {\n        this.setState({ selected: event.target.value });\n    }\n\n    handleCheck() {\n        const { selected, correct, correctAnswers } = this.state;\n        this.setState({ showAnswer: true });\n        if (selected === correct) {\n            this.setState({ correctAnswers: correctAnswers + 1 });\n        }\n    }\n\n    handleNext() {\n        const { quizData, questionIndex } = this.state;\n\n        if (questionIndex === quizData.length - 1) {\n            this.setState({\n                isComplete: true,\n            });\n            return;\n        }\n        this.setOptions(quizData, questionIndex + 1);\n        this.setState({\n            questionIndex: this.state.questionIndex + 1,\n            showAnswer: false,\n            selected: null,\n        });\n    }\n\n    restartSame() {\n        this.setState({\n            questionIndex: 0,\n            correctAnswers: 0,\n            isComplete: false,\n            correct: null,\n            selected: null,\n        });\n    }\n\n    render() {\n        const {\n            quizData,\n            isLoading,\n            questionIndex,\n            selected,\n            correct,\n            correctAnswers,\n            isComplete,\n            showAnswer,\n        } = this.state;\n\n        if (isLoading) {\n            return <Loader />;\n        }\n\n        if (isComplete) {\n            return (\n                <div className=\"answers\">\n                    <h1 className=\"item\">Complete</h1>\n                    <h3 className=\"item\">\n                        You scored {correctAnswers} out of 10\n                    </h3>\n                    <button className=\"item button\" onClick={this.restartSame}>\n                    Retry?\n                    </button>\n                    <button className=\"item button \" onClick={this.props.restartQuiz}>\n                    Home\n                    </button>\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"quiz\">\n                <div className=\"item\">\n                    <h2>{`Question No. ${questionIndex + 1} of ${\n                        quizData.length\n                    }`}</h2>\n                </div>\n                <p className=\"item\">{`Q. ${he.decode(\n                    quizData[questionIndex].question\n                )}`}</p>\n                <p className=\"item\">\n                    Please choose one of the following answers\n                </p>\n                {!showAnswer && (\n                    <div className=\"options\">\n                        {this.state.options.map((item) => (\n                            <button\n                                // className=\"item button\"\n                                className={\n                                    selected === item\n                                        ? \"item button selected\"\n                                        : \"item button\"\n                                }\n                                value={item}\n                                onClick={this.handleClick}\n                            >\n                                {he.decode(item)}\n                            </button>\n                        ))}\n                        <button\n                            className=\"item button\"\n                            onClick={this.handleCheck}\n                        >\n                            Check\n                        </button>\n                    </div>\n                )}\n                {showAnswer && (\n                    <div className=\"options\">\n                        {this.state.options.map((item) => (\n                            <button\n                                // className=\"item button\"\n                                className={\n                                    item === correct\n                                        ? \"item button correct\"\n                                        : item === selected && item !== correct\n                                        ? \"item button selected\"\n                                        : \"item button\"\n                                }\n                                value={item}\n                            >\n                                {he.decode(item)}\n                            </button>\n                        ))}\n                        <button\n                            className=\"item button\"\n                            onClick={this.handleNext}\n                        >\n                            Next\n                        </button>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default Quiz;\n","import React, { Component } from \"react\";\n\n// Start page with selector\nclass Start extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            difficulties: [\"Easy\", \"Medium\", \"Hard\"],\n            types: [\n                { value: \"multiple\", text: \"Multiple Choice\" },\n                { value: \"boolean\", text: \"True/False\" },\n            ],\n            category: \"\",\n            difficulty: \"\",\n            type: \"\",\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    // sets state to selection\n    handleChange(event) {\n        const type = event.target.id;\n        const value = event.target.value;\n        // console.log(type, value);\n        this.setState({ [type]: value });\n    }\n\n    render() {\n        const { category, difficulty, type, difficulties, types } = this.state,\n            vals = { category, difficulty, type },\n            { categories } = this.props;\n        return (\n            <div className=\"start\">\n                <div className=\"select\">\n                    <select id=\"category\" onChange={this.handleChange}>\n                        <option value=\"\" selected>\n                            Any Category\n                        </option>\n\n                        {categories.map((item) => (\n                            <option value={item.id}>{item.name}</option>\n                        ))}\n                    </select>\n                </div>\n\n                <div className=\"select\">\n                    <select id=\"difficulty\" onChange={this.handleChange}>\n                        <option value=\"\" selected>\n                            Any Difficulty\n                        </option>\n                        {difficulties.map((item) => (\n                            <option value={item.toLowerCase()}>{item}</option>\n                        ))}\n                    </select>\n                </div>\n\n                <div className=\"select\">\n                    <select id=\"type\" onChange={this.handleChange}>\n                        <option value=\"\" selected>\n                            Any Type\n                        </option>\n                        {types.map((item) => (\n                            <option value={item.value}>{item.text}</option>\n                        ))}\n                    </select>\n                </div>\n                \n                <div className=\"select\">\n                    <button onClick={() => this.props.startQuiz(vals)}>\n                        Start\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Start;\n","const Error = () => {\n    return (<p>{this.props.message}</p>);\n}\n \nexport default Error;","const Header = () => {\n    return (\n        <div className=\"header\">\n            <h1>Quiz App</h1>\n        </div>\n    );\n};\n\nexport default Header;\n","import \"./App.css\";\nimport Quiz from \"./components/quiz.js\";\nimport Start from \"./components/start.js\";\nimport React, { Component } from \"react\";\nimport Loader from \"./components/loader\";\nimport Error from \"./components/error\";\nimport Header from \"./components/header\";\n\n// Main App class\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isRunning: false,\n            isLoading: true,\n            categories: null,\n            error: null,\n            questions: null,\n        };\n        this.startQuiz = this.startQuiz.bind(this);\n        this.handleRestart = this.handleRestart.bind(this);\n    }\n\n    componentDidMount() {\n        fetch(\"https://opentdb.com/api_category.php\")\n            .then((response) => response.json())\n            .then((data) =>\n                this.setState({\n                    categories: data.trivia_categories,\n                    isLoading: false,\n                })\n            )\n            .catch((error) => this.setState({ error, isLoading: false }));\n    }\n\n    // Starts the quiz after choices selected\n    startQuiz(values) {\n        this.setState({ isLoading: true });\n        const { category, difficulty, type } = values;\n        const url =\n            \"https://opentdb.com/api.php?amount=10&category=\" +\n            category +\n            \"&difficulty=\" +\n            difficulty +\n            \"&type=\" +\n            type;\n\n        fetch(url)\n            .then((response) => response.json())\n            .then((data) => {\n                if (data.response_code === 0) {\n                    this.setState({\n                        questions: data.results,\n                        isLoading: false,\n                        isRunning: true,\n                    });\n                } else {\n                    throw new Error(\"API Error\");\n                }\n            })\n            .catch((error) => this.setState({ error, isLoading: false }));\n    }\n\n    handleRestart() {\n        this.setState({ isRunning: false });\n    }\n\n    render() {\n        const {\n            isRunning,\n            isLoading,\n            categories,\n            error,\n            questions,\n        } = this.state;\n\n        if (error) {\n            return <Error message={error.message} />;\n        }\n\n        if (isLoading) {\n            return <Loader />;\n        }\n\n        return (\n            <div className=\"wrapper\">\n                <Header />\n                {!isRunning && (\n                    <Start startQuiz={this.startQuiz} categories={categories} />\n                )}\n                {isRunning && (\n                    <Quiz\n                        restartQuiz={this.handleRestart}\n                        questions={questions}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}